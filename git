git status 命令可以让我们时刻掌握仓库当前的状态

git diff 顾名思义就是查看difference，显示的格式正是Unix通用的diff格式,如果git status告诉你有文件被修改过，用git diff可以查看修改内容

每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit

在Git中，我们用git log命令查看,git log命令显示从最近到最远的提交日志，我们可以看到3次提交，
最近的一次是“append GPL”，上一次是“add distributed”，最早的一次是“wrote a readme file”。 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上 --pretty=oneline参数：

在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，
当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

现在，我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令： git reset --hard HEAD^

Git提供了一个命令git reflog用来记录你的每一次命令,HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，
使用命令git reset --hard commit_id。穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

git checkout -- file可以丢弃工作区的修改 如命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。

命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区

要从版本库中删除该文件，那就用命令git rm删掉，并且git commit

git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

首先，我们创建dev分支，然后切换到dev分支：

$ git checkout -b dev
Switched to a new branch 'dev'
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

$ git branch dev
$ git checkout dev
Switched to branch 'dev'

用git branch命令查看当前分支：

切换回master分支： git checkout master

把dev分支的工作成果合并到master分支上：git merge dev

删除dev分支 ：git branch -d dev

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

用带参数的git log也可以看到分支的合并情况：git log --graph --pretty=oneline --abbrev-commit

Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作： git stash

Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作： git stash

要查看远程库的信息，用git remote：

$ git remote
origin
或者，用git remote -v显示更详细的信息：

$ git remote -v
origin  git@github.com:michaelliao/learngit.git (fetch)
origin  git@github.com:michaelliao/learngit.git (push)

推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：

$ git push origin master

多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name

首先，切换到需要打标签的分支上,然后，敲命令git tag <name>就可以打一个新标签,可以创建带有说明的标签，用-a指定标签名，-m指定说明文字;用命令git tag查看所有标签;git show <tagname>可以看到说明文字

如果要推送某个标签到远程，使用命令git push origin <tagname>;一次性推送全部尚未推送到远程的本地标签： git push origin --tags
命令git push origin <tagname>可以推送一个本地标签
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除： git tag -d v0.9  然后，从远程删除。删除命令也是push，但是格式 ：git push origin :refs/tags/<tagname>

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
